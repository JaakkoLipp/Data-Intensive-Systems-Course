from pymongo import MongoClient
from pymongo.errors import CollectionInvalid


######################SETUP################################

client = MongoClient('localhost', 27017)

# 3 databases with 4 tables each.

db_names = ["EU", "AS", "NA"]
collections = ["customers", "orders", "products", "suppliers"]

# Create databases and collections
for db_name in db_names:
    db = client[db_name]
    for collection in collections:
        try:
            db.create_collection(collection)
            print(f"Collection '{collection}' created in database '{db_name}'.")
        except CollectionInvalid:
            print(f"Collection '{collection}' already exists in database '{db_name}'.")

# Sample data
# Disclaimer: generated by AI

customers_data = [
    {"customer_id": 1, "name": "John Doe", "location": "EU"},
    {"customer_id": 2, "name": "Jacob Doe", "location": "EU"},
    {"customer_id": 3, "name": "Jane Smith", "location": "AS"},
    {"customer_id": 4, "name": "Jessica Smith", "location": "AS"},
    {"customer_id": 5, "name": "Alex Johnson", "location": "NA"},
    {"customer_id": 6, "name": "George Johnson", "location": "NA"},
]
orders_data = [
    {"order_id": 1, "customer_id": 1, "product_id": 101, "quantity": 2, "location": "EU"},
    {"order_id": 2, "customer_id": 2, "product_id": 102, "quantity": 1, "location": "EU"},
    {"order_id": 3, "customer_id": 3, "product_id": 103, "quantity": 5, "location": "AS"},
    {"order_id": 4, "customer_id": 4, "product_id": 104, "quantity": 3, "location": "AS"},
    {"order_id": 5, "customer_id": 5, "product_id": 105, "quantity": 4, "location": "NA"},
    {"order_id": 6, "customer_id": 6, "product_id": 106, "quantity": 2, "location": "NA"},
]

products_data = [
    {"product_id": 101, "name": "Laptop", "price": 1200, "supplier_id": 201},
    {"product_id": 102, "name": "Smartphone", "price": 800, "supplier_id": 202},
    {"product_id": 103, "name": "Tablet", "price": 600, "supplier_id": 203},
    {"product_id": 104, "name": "Monitor", "price": 300, "supplier_id": 204},
    {"product_id": 105, "name": "Keyboard", "price": 100, "supplier_id": 205},
    {"product_id": 106, "name": "Mouse", "price": 50, "supplier_id": 206},
]

suppliers_data = [
    {"supplier_id": 201, "name": "Tech Supplies Co.", "location": "EU"},
    {"supplier_id": 202, "name": "Gadget World", "location": "EU"},
    {"supplier_id": 203, "name": "Device Hub", "location": "AS"},
    {"supplier_id": 204, "name": "Screen Masters", "location": "AS"},
    {"supplier_id": 205, "name": "Keyboard Kings", "location": "NA"},
    {"supplier_id": 206, "name": "Mouse House", "location": "NA"},
]


# Insert sample data with no replication
for db_name in db_names:
    db = client[db_name]
    if db.customers.count_documents({}) == 0:  # Check if data already added
        if db_name == "EU":
            # EU data
            db.customers.insert_many(customers_data[:2])
            db.orders.insert_many(orders_data[:2])
            db.products.insert_many(products_data[:2])
            db.suppliers.insert_many(suppliers_data[:2])
            # NA data
            db.customers.insert_many(customers_data[4:])
            db.orders.insert_many(orders_data[4:])
            db.products.insert_many(products_data[4:])
            db.suppliers.insert_many(suppliers_data[4:])
        elif db_name == "AS":
            # AS data
            db.customers.insert_many(customers_data[2:4])
            db.orders.insert_many(orders_data[2:4])
            db.products.insert_many(products_data[2:4])
            db.suppliers.insert_many(suppliers_data[2:4])
            # EU data
            db.customers.insert_many(customers_data[:2])
            db.orders.insert_many(orders_data[:2])
            db.products.insert_many(products_data[:2])
            db.suppliers.insert_many(suppliers_data[:2])
        elif db_name == "NA":
            # NA data
            db.customers.insert_many(customers_data[4:])
            db.orders.insert_many(orders_data[4:])
            db.products.insert_many(products_data[4:])
            db.suppliers.insert_many(suppliers_data[4:])
            # AS data
            db.customers.insert_many(customers_data[2:4])
            db.orders.insert_many(orders_data[2:4])
            db.products.insert_many(products_data[2:4])
            db.suppliers.insert_many(suppliers_data[2:4])
    else:
        print(f"Data already exists in database '{db_name}'.")



#####################END SETUP#############################

# User interface to query the databases
while True:
    print("\nSelect a query to execute:")
    print("1. Find all customers in a specific region")
    print("2. Find all orders in a specific region")
    print("3. Find all products in a specific region")
    print("4. Find all suppliers in a specific region")
    print("5. Exit")
    choice = input("Enter your choice (1/2/3/4/5): ")

    # Customer search
    if choice == "1":
        region = input("Enter the region (EU/AS/NA): ")
        if region in db_names:
            customers = client[region].customers.find()
            for customer in customers:
                print(f"Customer ID: {customer['customer_id']}, Name: {customer['name']}, Location: {customer['location']}")
        else:
            print("Invalid region selected.")
    # Order search
    elif choice == "2":
        region = input("Enter the region (EU/AS/NA): ")
        if region in db_names:
            orders = client[region].orders.find()
            for order in orders:
                print(f"Order ID: {order['order_id']}, Customer ID: {order['customer_id']}, Product ID: {order['product_id']}, Quantity: {order['quantity']}, Location: {order['location']}")
        else:
            print("Invalid region selected.")

    # Product search
    elif choice == "3":
        region = input("Enter the region (EU/AS/NA): ")
        if region in db_names:
            products = client[region].products.find()
            for product in products:
                print(f"Product ID: {product['product_id']}, Name: {product['name']}, Price: {product['price']}, Supplier ID: {product['supplier_id']}")
        else:
            print("Invalid region selected.")
    
    # Supplier search
    elif choice == "4":
        region = input("Enter the region (EU/AS/NA): ")
        if region in db_names:
            suppliers = client[region].suppliers.find()
            for supplier in suppliers:
                print(f"Supplier ID: {supplier['supplier_id']}, Name: {supplier['name']}, Location: {supplier['location']}")
        else:
            print("Invalid region selected.")
    
    elif choice == "5":
        print("Exiting...")
        break
    else:
        print("Invalid choice. Please try again.")

# Close the connection
client.close()
